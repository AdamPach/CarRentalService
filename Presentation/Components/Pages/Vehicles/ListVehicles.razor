@page "/vehicles"
@page "/vehicles/{IsAvailable:bool}"

@rendermode InteractiveServer

@using CarRentalService.UseCases.Vehicles.Vehicles
@using CarRentalService.UseCases.Vehicles.Vehicles.DTOs
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject IVehicleService VehicleService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Vehicles</PageTitle>

<AuthorizeView Roles="Manager">
    <Authorized>
        <MudButton
            Variant="@Variant.Filled"
            OnClick="@AddVehicle">
            Create Vehicle
        </MudButton>
    </Authorized>
</AuthorizeView>

<MudButton
    Variant="@Variant.Filled"
    OnClick="@SearchVehicles">
    Search Vehicles
</MudButton>

<MudSwitch
    @bind-Value="@Query.IsAvailable"
    Color="Color.Primary">
    Is Car Available
</MudSwitch>

<MudTextField
    Label="Brand"
    @bind-Value="@Query.Brand"
    Variant="Variant.Text"
    Margin="Margin.Normal" />

<MudTable
    T="@VehiclePreviewDto"
    Items="@_vehicles"
    Hover="@true"
    OnRowClick="SelectCar"
    RowClass="cursor-pointer">
    
    <HeaderContent>
        <MudTh>Brand</MudTh>
        <MudTd>Model</MudTd>
        <MudTd>License Plate</MudTd>
        <MudTd>Seats</MudTd>
        <MudTd>Engine Type</MudTd>
        <MudTd>Vehicle Type</MudTd>
        <MudTd>Price Per Day</MudTd>
        <MudTd>Is Rented</MudTd>
    </HeaderContent>
    
    <RowTemplate>
        <MudTd DataLabel="Brand">@context.Brand</MudTd>
        <MudTd DataLabel="Model">@context.Model</MudTd>
        <MudTd DataLabel="License Plate">@context.LicensePlate</MudTd>
        <MudTd DataLabel="Seats">@context.Seats</MudTd>
        <MudTd DataLabel="Engine Type">@context.EngineType</MudTd>
        <MudTd DataLabel="Vehicle Type">@context.VehicleType</MudTd>
        <MudTd DataLabel="Price Per Day">@context.PricePerDay</MudTd>
        <MudTd DataLabel="Is Rented">@context.IsRented</MudTd>
    </RowTemplate>
    
</MudTable>

@code {

    [Parameter] 
    public bool IsAvailable { get; set; }
    
    private IList<VehiclePreviewDto> _vehicles = [];

    private VehiclesQueryDto Query { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Query.IsAvailable = IsAvailable;
        
        await LoadVehicles();
        
        await base.OnInitializedAsync();
    }

    private async Task LoadVehicles()
    {
        var result = await VehicleService.GetVehiclesPreviewsAsync(Query);
        
        if (result.IsFailed)
        {
            Snackbar.Add("Cannot read a Vehicles!", Severity.Error);
            return;
        }
        
        _vehicles = result.Value.ToList();
    }
    
    private void AddVehicle()
    {
        NavigationManager.NavigateTo("/vehicles/add");
    }

    private Task SearchVehicles() => LoadVehicles();

    private void SelectCar(TableRowClickEventArgs<VehiclePreviewDto> args)
    {
        if(args.Item?.IsRented == true)
        {
            Snackbar.Add("Vehicle is already rented", Severity.Error);
            return;
        }
        
        NavigationManager.NavigateTo("/rentals/create/" + args.Item!.Id);
    }

}